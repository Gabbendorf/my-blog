<%- include ../partials/header.ejs %>
<div class="likes">
  <%- include('../partials/likes-form.ejs', {value: 11}); %>
  Likes so far: <%= likesCount %><br>
<a href="/"> Back to main page <i class="fas fa-home"></i></a>
</div>


  <main>

    <div class="article-title">Java PrintStream</div>
    <div class="sub-title">Using and testing Java printstream</div>


    <div class="article-section"> Introduction </div>

  In my recent iteration at 8th Light I focused myself on understanding and properly using (and testing!) input and output streams in Java.
  In this note I'll talk only about output streams and try to share my understanding of what is going on behind the scenes. I'll start with
  more theoretical remarks and then move to practical examples. <br><br>

  <code>PrintStream</code> is a Java class that privides handy methods to print data (eg. println). <br>

  <code>PrintStream</code> prints the data to(in) a specified place of output. This place is specified in an argument we pass when we create the <code>PrintStream</code> constructor. For example:

<pre><code>
this.output = new ByteArrayOutputStream();
commandLineUI = new CommandLineUI(new PrintStream(this.output));
</code></pre>

I'll talk about this code in more detail later, now just wanted to show how <code>this.output</code> was passed as an argument in instantiating a <code>new PrintStream</code>.<br><br>

<code>System.out</code>, that is widely used to print data to the console, is an instance of <code>PrintStream</code>. It means that we can call <code>PrintStream</code> methods on it (eg. <code>System.out.println</code>). In the code below,
I first pass <code>System.out</code> as an argument, and later mark it in constructor as an instance of <code>PrintStream</code>.
<pre><code>
commandLineUI = new CommandLineUI(System.out);

CommandLineUI(PrintStream output) {
  this.output = output
}
</code></pre>
In the code above I have <code>System.out</code> under <code>this.output</code>.<br><br>

I said above that instances of <code>PrintStream</code> need an argument pointing to the place to which we want to stream output. So why <code>System.out</code> doesn't have one even though it's <code>PrintStream</code>'s instance? <br>
Because <code>System.out</code> just knows that it prints to command line. Someone set it like that at some point in the past, hence we don't have to specify the output place :)

<img src="https://m.popkey.co/020063/Ql0aW.gif?c=popkey-web&p=popkey&i=cats-animals&l=direct&f=.gif" width="100%">
<div class="photo-data">Mind blown</div>

<div class="article-section"> Example of using System.out </div>
Let's take look at an example of using <code>System.out</code>:<br><br>

In app.java:
<pre><code>
commandLineUI = new CommandLineUI(System.out);
</code></pre>

In commandLineUJ.java
<pre><code>
CommandLineUI(PrintStream output) {
  this.output = output
}

private void greetUsers() {
  output.println("Hello!");
}
</code></pre>
The code above simply uses <code>System.out</code>, "hidden" under <code>output</code> variable, to print stuff to the console. Setting <code>System.out</code> to a variable and then using this variable has a great advantage - we stop using the global scope of <code>System.out</code>.<br>

<div class="article-section"> Testing </div>

Now we move to the more complicated and more exciting part - testing. <br>
Testing <code>System.out</code>, as you all know, is about checking is the right stuff was printed to the console.<br>
In order to do it, we don't want the stream to go to the console, but to our test - we want to "catch" it and check if it has the expected content. <br>

<img src="http://i.dailymail.co.uk/i/pix/2010/06/03/article-1283639-08DDD885000005DC-17_468x286.jpg" width="100%">
<div class="photo-data">Finding the right track for my stream</div>

In my test, in the <code>@Before</code> block, I instantiate a new <code>CommandLineUI</code>.<br>
But instead of passing it <code>System.out</code>, as I did in the "normal" code, I pass a new instance of <code>PrintStream</code> with a specified output.<br>
I do it because I don't want to print stuff to the console, but to catch it and have in a safe place from which we can get it and test it. <br>
My "safe place" will be an instance of <code>ByteArrayOutputStream</code> - a easy to manage Java class that allows you to store output data. <br>

<pre><code>
this.output = new ByteArrayOutputStream();
commandLineUI = new CommandLineUI(new PrintStream(output));
</code></pre>

Let's see an example of test:

<pre><code>
@Test
public void greetsTheUser() {
  commandLineUI.greetUsers();

  assureTrue(output.toString().contains("Hello"));
}
</code></pre>

we call the <code>greetUsers()</code> method. Our method goes to the following code (also mentioned above):
<pre><code>
private void greetUsers() {
  output.println("Hello!");
}
</code></pre>

As you remember, In the "normal" code, we have <code>System.out</code> under <code>this.output</code>, but in out test, we have <code>PrintStream</code> with an <code>output</code> place.<br>
Because of this, "Hello" in our test won't go to the console, but to our <code>ByteArrayOutputStream output</code>.<br><br>

Then we just check if the <code>output</code> has the right string.

<img src="https://media.giphy.com/media/3lhQs5X6WEcF2/giphy.gif" width="100%">
<div class="photo-data"> Bang! </div>


<div class="comments">
  <%- include('../partials/comments-form.ejs', {value: 11}); %>
  <%- include ../partials/comments-list.ejs %>
</div>

</main>

  <%- include ../partials/footer.ejs %>
