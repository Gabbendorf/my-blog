<%- include ../partials/header.ejs %>
<div class="likes">
  <%- include('../partials/likes-form.ejs', {value: 1}); %>
  Likes so far: <%= likesCount %><br>
<a href="/"> Back to main page <i class="fas fa-home"></i></a>
</div>


  <main>

    <div class="article-title">Promise object in JS </div>
    <div class="sub-title"> This note is my attempt at explaining the idea of a promise object in JS. </div>

    Learning javascript as the second language, right after Ruby, is sometimes hard, as the path from zero to JS-hero is full of new - unknown to Ruby - concepts. One of them is a promise object that I happened uppon while creating my first end-to-end JS
    application.

    <div class="article-section"> Background </div>

    In one of the weekly challenges at Makers Academy, for an MVP I was supposed to write an application which:<br><br> * allows user to add posts (listings) on the website,<br> * and displays the listings on the website. Together with my group we've decided to do it in a new technology - Node. Here are some of my notes from this challenge.

    <div class="article-section"> Tools </div>

    * Node, express, sequelizer, postgres.

    <div class="article-section"> Relevant code </div>

    <div class="article-section-2"> Listings controller </div>

    This file contains two CRUD methods for the listing model, one to create a record in the database(<code>create</code>) and one for retrieve all of the records(<code>list</code>).

    <pre><code>
const Listing = require('../models').Listing;

module.exports = {
  create(req, res) {
    return Listing
      .create({
        name: req.body['listingname'],
        location: req.body['listinglocation'],
        description: req.body['listingdescription'],
        price: req.body['listingprice']
      })
  },

  list(req, res) {
    return Listing
      .all()
  },
};
</code></pre>

    <div class="article-section-2"> Router </div>

    This file contains two routes:<br> * <code>app.get</code>, which is rendering the index.ejs with the listings retrieved from the database,<br> * <code>app.post</code>, which is saving the records to the database.<br>

    <pre><code>
const listingsController = require('../controllers').listings;
var path = require('path');

module.exports = function(app) {

  app.get('/', function(req, res) {
     listingsController.list(req, res)
      .then(function(listings){
         res.render('index', { x: listings })
       });
   });

  app.post('/', listingsController.create);

}
</code></pre>

    <div class="article-section"> Explanation </div>

    <div class="article-section-2"> Create method </div>

    The create method goes one way - we want to store a new record in a database and that's it. We don't want to get anything back. Let's analyse it step by step:<br><br> 1) On a homepage there is a following form:

    <pre><code>
< form class="form" action="/" method="post">
  < p2> Add a place: </p2>
  < input type="text" name="listingname" class="single_form_window">
  < input type="text" name="listinglocation" class="single_form_window">
  < input type="text" name="listingprice" class="single_form_window">
  < input type="text" name="listingdescript" class="single_form_window">
  < input type="submit" value="submit">
< /form>
</code></pre> It sends us to <code>/</code> with a <code>post</code> method.<br> 2) router, seeing this, calls a <code>listingsController.create</code> function:

    <pre><code>
// in router
app.post('/', listingsController.create);
</code></pre> 3) This function picks the data from the form and <code>create</code> a new record in the database:

    <pre><code>
// in a controller
const Listing = require('../models').Listing;

module.exports = {
  create(req, res) {
    return Listing
      .create({
        name: req.body['listingname'],
        location: req.body['listinglocation'],
        description: req.body['listingdescription'],
        price: req.body['listingprice']
      })
  }
</code></pre> 4) And that's it. We don' want anything back, just want to see our record in the database.<br>

    <i>5) Side note: <code>create</code> method also returns a promise object, but I'm ignoring it in my program as in my <code>create</code> function I just want to save the record in the database and don't want to get anything back. </i>

    <div class="article-section-2"> List </div>

    The read element of CRUD (<code>list</code> method) is more complicated.<br><br> 1) We want a user to be able to see the records on the website right at the start. That's why at the <code>app.get('/')</code> we want to get all of the listings.<br>    2) For this purpose I'm using the <code>listingsController.list(req, res)</code> functions that will get the data from the database and pass it to the index page.

    <pre><code>
// in router
app.get('/', function(req, res) {
   listingsController.list(req, res)
    .then(function(listings){
       res.render('index', { x: listings })
     });
 });
</code></pre> 3) The <code>list</code> function is pretty straightforward

    <pre><code>
// in a controller
list(req, res) {
  return Listing
    .all()
},
</code></pre> 4) What's interesting, this method is not returning all our records, but only a <strong>promise object</strong>. This promise object will <b>become the data</b> only when we trigger it.<br> 5) For this purpose we use <code>.then</code>.<br>    6) Let's analyze the following piece code step by step. I'm chaining the methods now for educational purposes:<br>
    <pre><code>
listingsController.list(req, res).then(function(listings){
    res.render('index', { x: listings })
  });
</code></pre> * we call the <code>list</code> method which returns us the promise object,<br> * and right after that we <i>activate</i> the data by calling <code>.then</code>.<br> * at the end we <code>render</code> the <code>index</code> page and
    pass the data to later use them on the index page.<br>

    <div class="article-section"> Why do we need it? </div>

    JS operates in the browser. As users usually do/want may operations at the same time, JS needs to be prepared for this. In order to explain it we can use the following analogy.<br> JS is a wedding planner and wants everything to be ready at the right
    time. Because of this, before a wedding cake enters the ballroom, it sends a person to buy this cake and wait for a right moment to enter. <br> The cake will enter a room only when asked by the wedding planner. So think of <code>.this</code> as of
    a call from the wedding planner to that helping person.

  <div class="article-section"> Additional example - this blog </div>

  I've happened upon this problem again while writing the likes logic for this website. <br><br>
  The code was supposed to:<br>
  - count likes for a post, <br>
  - display them on the website.<br><br>
  Below you can find the async code with a short explanation. <br><br>

  <div class="article-section-2"> Router </div>
  <pre><code>
likesController.count(1).then(function(likesCount) {
  res.render('promise-object', {likesCount: likesCount});
})
</code></pre>

<div class="article-section-2"> Controller </div>

  <pre><code>
const Like = require('../models').Like;

module.exports = {
  count(number) {
    return Like.findAll({
      where: {
        art_id: number,
      },
    }).then(function(rows) {
      return rows.length;
    });
  }
}
</code></pre>

<div class="article-section-2"> Explanation - how it works step by step </div>
1. We call a <code>count</code> method on the <code>likesController</code> with a number as an argument.<br>
2. The <code>count</code> method contains a built-in node function <code>findAll</code> which operates asynchronously. <br>
3. Because <code>findAll</code> operates asynchronously, we know that the <code>count</code> method will return a promise. <br>
4. Because of the fact that <code>count</code> returns a promise, in order to <i> activate</i> it we use <code>.then</code> - it means that once the program will be done with <code>count</code> it will continue with the rest of the code.<br>
5. Inside of the <code>count</code> method there are two actions: firstly, <code>findAll</code> tells to find in the database records with a particulat <code>art_id</code>; secondly, once the records are found, we pass them to <code>.then</code>, which has a function that counts the number of rows and returns it.<br>
6. What is important, the <code>count</code> method returns a promise, the number or rows is returned by the function (callback) in <code>.then</code> inside of <code>count</code>.<br>
7. This number is later passed to the outer <code>.then</code> - the one in the router. <br><br>

<div class="comments">
  <%- include('../partials/comments-form.ejs', {value: 1}); %>
  <%- include ../partials/comments-list.ejs %>
</div>

</main>

  <%- include ../partials/footer.ejs %>
